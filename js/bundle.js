/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/index.js":
/*!*********************!*\
  !*** ./js/index.js ***!
  \*********************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n(function () {\n  window.addEventListener(\"load\", function () {\n    var $arcadeButtons = Array.from(document.querySelectorAll(\".arcade-button\"));\n    var $clearButton = document.querySelector(\".action-button.clear-all\");\n    var $colorButton = document.querySelector(\"#color-config-button\");\n    var $menu = document.querySelector(\".menu\");\n    var $menuToggle = document.querySelector(\".menu-toggle\");\n    var $playerCount = document.querySelector(\"#player-count\");\n    var $pokerTable = document.querySelector(\".poker-table\");\n    var $resetButton = document.querySelector(\"#reset-button\");\n    var $saveButton = document.querySelector(\".action-button.save\");\n    var $cancelButton = document.querySelector(\".action-button.cancel\");\n    var $statusIndicator = document.querySelector(\".status-indicator\");\n    var $configureButton = document.querySelector(\"#configure-button\");\n    var $randomPlayerButton = document.querySelector(\"#randomize-player-button\");\n    var headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    };\n    var STATES = {\n      OFFLINE: 0,\n      CONNECTED: 1,\n      CONFIGURING: 2,\n      RUNNING: 3,\n      RANDOMIZING: 4,\n      ERROR: 5\n    };\n    var STATUS = [\"offline\", \"connected\", \"configuring\", \"running\", \"randomizing\", \"error\"];\n    var currentPlayer = 0;\n    var currentPlayerIndex = 0;\n    var playerCount = 0;\n    var players = [];\n    var status = STATES.OFFLINE;\n    var configured = false;\n    var undoState = {};\n    var Socket = new WebSocket(\"ws://tc2000:81\");\n    Socket.onmessage = function (event) {\n      handleSocketMessage(event);\n    };\n    Socket.onclose = function () {\n      console.log(\"lost connection, reconnecting in 5 seconds\");\n      Socket = null;\n      setTimeout(function () {\n        return Socket = new WebSocket(\"ws://tc2000:81\");\n      }, 5000);\n    };\n    Socket.addEventListener(\"disconnected\", function () {\n      console.log(\"socket is closed\");\n    });\n    Socket.addEventListener(\"error\", function (error) {\n      console.log(\"socket error\");\n      console.error(error);\n    });\n    $colorButton.addEventListener(\"click\", handleColorToggle);\n    $menuToggle.addEventListener(\"click\", handleMenuToggle);\n    $clearButton.addEventListener(\"click\", handleClearConfig);\n    $resetButton.addEventListener(\"click\", handleResetConfig);\n    $saveButton.addEventListener(\"click\", handleSaveConfig);\n    $arcadeButtons.forEach(function (button) {\n      button.addEventListener(\"click\", handleArcadeButtonClick(button));\n    });\n    $randomPlayerButton.addEventListener(\"click\", handleRandomizeClick);\n    $cancelButton.addEventListener(\"click\", handleCancelConfigClick);\n    $configureButton.addEventListener(\"click\", handleConfigureClick);\n    function handleConfigureClick() {\n      undoState = buildPayload();\n      setState({\n        status: STATES.CONFIGURING\n      });\n      sendUpdatesOverWebSockets();\n      renderState();\n      closeMenu();\n    }\n    function handleCancelConfigClick() {\n      setState(undoState);\n      sendUpdatesOverWebSockets();\n      renderState();\n    }\n    function handleRandomizeClick() {\n      setState({\n        status: STATES.RANDOMIZING\n      });\n      clearArcadeButtons(false);\n      closeMenu();\n      sendUpdatesOverWebSockets();\n    }\n    function handleSocketMessage(_ref) {\n      var data = _ref.data;\n      console.log(\"handleSocketMessage\");\n      var json = JSON.parse(data);\n      setState(json);\n      renderState();\n    }\n    function handleColorToggle() {\n      var span = $colorButton.querySelector(\"span\");\n      var text = $pokerTable.classList.contains(\"colored-buttons\") ? \"Colored Buttons\" : \"Uncolored Buttons\";\n      span.innerText = text;\n      $pokerTable.classList.toggle(\"colored-buttons\");\n      closeMenu();\n    }\n    function handleMenuToggle() {\n      $menu.classList.toggle(\"open\");\n    }\n    function handleClearConfig() {\n      setState({\n        players: [],\n        playerCount: 0,\n        currentPlayerIndex: 0,\n        currentPlayer: 0,\n        status: STATES.CONFIGURING,\n        configured: false\n      });\n      renderState();\n      sendUpdatesOverWebSockets();\n    }\n    function handleResetConfig() {\n      setState({\n        players: [],\n        currentPlayerIndex: 0,\n        currentPlayer: 0,\n        status: STATES.CONNECTED,\n        playerCount: 0,\n        configured: false\n      });\n      renderState();\n      sendUpdatesOverWebSockets();\n      closeMenu();\n    }\n    function handleSaveConfig() {\n      setState({\n        players: players,\n        playerCount: players.length,\n        currentPlayerIndex: 0,\n        currentPlayer: 0,\n        status: STATES.RUNNING,\n        configured: true\n      });\n      renderState();\n      undoState = {};\n      sendUpdatesOverWebSockets();\n    }\n    function handleArcadeButtonClick(button) {\n      var player = parseInt(button.getAttribute(\"player\"), 10);\n      return function () {\n        if (status !== STATES.CONFIGURING) return;\n        togglePlayer(player);\n        setState({\n          players: players,\n          playerCount: players.length,\n          currentPlayerIndex: 0,\n          currentPlayer: players[0],\n          status: status,\n          configured: configured\n        });\n        renderState();\n        sendUpdatesOverWebSockets();\n      };\n    }\n    function switchPlayerButtonOn(player) {\n      var ab = getButton(player);\n      ab.classList.add(\"selected\");\n    }\n    function togglePlayerButton(player) {\n      var ab = getButton(player);\n      ab.classList.toggle(\"selected\");\n    }\n    function setState(state) {\n      var newState = _objectSpread(_objectSpread({}, buildPayload()), state);\n      configured = newState.configured;\n      currentPlayer = newState.currentPlayer;\n      currentPlayerIndex = newState.currentPlayerIndex;\n      playerCount = newState.playerCount;\n      players = newState.players;\n      status = newState.status;\n      return newState;\n    }\n    function sendUpdatesOverWebSockets() {\n      Socket.send(JSON.stringify(buildPayload()));\n    }\n    function buildPayload() {\n      return {\n        configured: configured,\n        currentPlayer: currentPlayer,\n        currentPlayerIndex: currentPlayerIndex,\n        playerCount: playerCount,\n        players: players,\n        status: status\n      };\n    }\n    function renderState() {\n      console.log(\"renderState\", buildPayload());\n      renderPlayerCount();\n      renderButtons();\n      renderStatus();\n    }\n    function renderPlayerCount() {\n      var _players;\n      if (players == undefined) console.log(\"renderPlayerCount players undefined\");\n      $playerCount.innerText = (_players = players) === null || _players === void 0 ? void 0 : _players.length;\n    }\n    function renderStatus() {\n      clearStatus();\n      if (status === STATES.RANDOMIZING) {\n        $statusIndicator.classList.add(\"random\".concat(currentPlayer));\n      } else {\n        $statusIndicator.classList.add(STATUS[status]);\n      }\n    }\n    function getButton(player) {\n      var button = $arcadeButtons.find(function (ab) {\n        return ab.getAttribute(\"player\") == \"\".concat(player);\n      });\n      return button || $arcadeButtons[0];\n    }\n    function openMenu() {\n      $menu.classList.add(\"open\");\n    }\n    function closeMenu() {\n      $menu.classList.remove(\"open\");\n    }\n    function clearArcadeButtons() {\n      var removeNum = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      $arcadeButtons.forEach(function (ab) {\n        var _ab$querySelector;\n        if (removeNum) (_ab$querySelector = ab.querySelector(\"span\")) === null || _ab$querySelector === void 0 || _ab$querySelector.remove();\n        ab.classList.remove(\"selected\");\n      });\n    }\n    function hideConfigButtons() {\n      $clearButton.classList.remove(\"visible\");\n      $saveButton.classList.remove(\"visible\");\n      $cancelButton.classList.remove(\"visible\");\n    }\n    function showConfigButtons() {\n      $clearButton.classList.add(\"visible\");\n      $saveButton.classList.add(\"visible\");\n      $cancelButton.classList.add(\"visible\");\n    }\n    function renderButtons() {\n      hideConfigButtons();\n      clearArcadeButtons();\n      if (status === STATES.RANDOMIZING) {\n        togglePlayerButton(currentPlayer);\n      }\n      if (status === STATES.CONFIGURING) {\n        showConfigButtons();\n        players.forEach(function (player, i) {\n          renderPlayerNumber(player, i);\n          switchPlayerButtonOn(player);\n        });\n      }\n      if (status === STATES.CONNECTED || status === STATES.RUNNING) {\n        switchPlayerButtonOn(currentPlayer);\n      }\n    }\n    function renderPlayerNumber(player, i) {\n      var num = createElement(\"span\", i + 1);\n      var btn = document.querySelector(\".arcade-button[player=\\\"\".concat(player, \"\\\"]\"));\n      btn.appendChild(num);\n    }\n    function togglePlayer(player) {\n      if (players.includes(player)) {\n        players = players.filter(function (p) {\n          return p !== player;\n        });\n      } else {\n        players.push(player);\n      }\n    }\n    function createElement(tagName, content) {\n      var attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var el = document.createElement(tagName);\n      Object.keys(attrs).forEach(function (key) {\n        if (key === \"className\") {\n          el.classList.add(attrs[key]);\n        } else {\n          el.setAttribute(key, attrs[key]);\n        }\n      });\n      if (typeof content === \"string\" || typeof content === \"number\") {\n        el.innerText = content;\n      } else {\n        el.appendChild(content);\n      }\n      return el;\n    }\n    function clearStatus() {\n      STATUS.forEach(function (c) {\n        $statusIndicator.classList.remove(c);\n      });\n      for (var i = 0; i < 10; i++) {\n        $statusIndicator.classList.remove(\"random\".concat(i));\n      }\n    }\n  });\n})();\n\n//# sourceURL=webpack://tc-2000/./js/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/index.js"]();
/******/ 	
/******/ })()
;